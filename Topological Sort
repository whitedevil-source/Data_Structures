/*Topological Sort : A topological ordering is an ordering of the nodes in a
directed graph where for each directed edge from node A to node B, node A appears
before node B in the ordering. Topological ordering are not UNIQUE
*/
//Directed Acyclic Graph cannot have topological sort
// Only directed Acyclic graph can have valid topological sort

//indegree: number of inward directed edges on vertex in a directed graph



#define FIO ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define test ll t; cin>>t; while(t--)
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    // freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);

    int n, m; cin >> n >> m;
    int cnt = 0;
    vector<vi> adj_list(n);
    vi indeg(n, 0);
    rep(i, m) {
        int u, v; cin >> u >> v;
        //u --> v
        adj_list[u].push_back(v);
        indeg[v]++;
    }
    queue<int> pq;
    rep(i, n) {
        if (indeg[i] == 0) {
            pq.push(i);
        }
    }
    while (!pq.empty()) {
        cnt++;
        int x = pq.front();
        pq.pop();
        cout << x << " ";
        for (auto it : adj_list[x]) {
            indeg[it--];
            if (indeg[it] == 0) pq.push(it);
        }
    }

    return 0;
}
