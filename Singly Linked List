#include<iostream>
#include<algorithm>
#include<vector>
#include<sstream>
#include<queue>
#include<cmath>
#include<iomanip>
#include<set>
#include<map>
using namespace std;
#define ll long long
#define pb push_back
#define pll pair<ll,ll> 
#define mll map<ll,ll>
#define pii pair<int,int>
#define vpii vector<pii>
#define rep(i,n) for(int i=0; i<n; i++)
#define All(x,v) for(auto x:v)
#define arrin(a,n) ll a[n]; rep(i,n) cin>>a[i]
#define vi vector<int>
#define vll vector<ll>
#define nl "\n"
#define print(arr) All(x,arr) cout<<x<<" "; cout<<nl
#define sz(x) (int)x.size()
#define all(v) v.begin(),v.end()
#define ing(m,ad) rep(i,m){ int u,v; cin>>u>>v; u--;v--; ad[u].pb(v); ad[v].pb(u);}
#define vdsort(v) sort(v.begin(),v.end(),greater<int>())
#define F first
#define S second
#define mod 1'000'000'007
const int MAXN = 100'005;
int spf[MAXN];
ll fac1[MAXN], fac2[MAXN], inv[MAXN];
ll gcd(ll x, ll y) { return y ? gcd(y, x % y) : x; }

template <typename C, typename T = std::decay_t<decltype(*begin(std::declval<C>()))>, typename std::enable_if<!std::is_same<C, std::string>::value>::type* = nullptr>
std::ostream& operator<<(std::ostream& os, const C& container)
{
    bool first = true;
    std::stringstream ss;
    ss << '[';
    for (const auto& x : container)
    {
        if (!first)
        {
            ss << ", ";
        }
        first = false;
        ss << x;
    }
    ss << ']';
    return os << ss.str();
}
template <class T1, class T2>
std::ostream& operator<<(std::ostream& os, const std::pair<T1, T2>& p)
{
    os << '{' << p.first << ", " << p.second << '}';
    return os;
}
vector<string> vec_splitter(string S)
{
    S += ',';
    vector<string> res;
    while (!S.empty())
    {
        res.push_back(S.substr(0, S.find(',')));
        S = S.substr(S.find(',') + 1);
    }
    return res;
}

template <typename Head, typename... Tail>
void debug_out(vector<string> args, int idx, int LINE_NUM, Head H, Tail... T)
{
    if (idx > 0)
        cerr << ", ";
    else
        cerr << "Line(" << LINE_NUM << ") ";
    stringstream ss;
    ss << H;
    cerr << args[idx] << " = " << ss.str();
    debug_out(args, idx + 1, LINE_NUM, T...);
}
#ifdef DEBUG
#define debug(...) debug_out(vec_splitter(#__VA_ARGS__), 0, __LINE__, __VA_ARGS__)
#else
#define debug(...) 42
#endif


class node {
public:
    int data;
    node* next;

    node(int val) {
        data = val;
        next = NULL;
    }
};

void insertAthead(node*& head, int val) {
    node* n = new node(val);
    n->next = head;
    head = n;
}

void insertAtTail(node*& head, int val) {
    node* n = new node(val);
    if (head == NULL) {
        head = n;
        return;
    }
    node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = n; 
}

void display(node*& head) {
    node* temp = head;
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

bool search(node*& head, int key) {
    node* temp = head;
    while (temp != NULL) {
        if (temp->data == key) {
            return true;
        }
        temp = temp->next;
    }
    return false;
}

void deleteAtHead(node*& head) {
    node* todelete = head;
    head = head->next;
    delete todelete;
}

void deletion(node*& head, int val) {
    if (head == NULL) return;
    if (head->next == NULL) {
        deleteAtHead(head);
        return;
    }
    node* temp = head;
    while (temp->next->data != val) {
        temp = temp->next;
    }
    node* todelete = temp->next;
    temp->next = temp->next->next;
    delete todelete; //deleting the 'todelete' pointer
}

//Iterative way to reverse a linked list 
node* reverse(node*& head) {
    node* prevptr = NULL;
    node* currptr = head;
    node* nextptr;
    while (currptr != NULL) {
        nextptr = currptr->next;
        currptr->next = prevptr;

        prevptr = currptr;
        currptr = nextptr;
    }
    return prevptr;
}

//Recursive reverse
node* reverseRecursive(node* &head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    node* newhead = reverseRecursive(head->next);
    head->next->next = head;
    head->next = NULL;
    return newhead;
}
//Linked list examples
// Reverse k nodes in a linked list
node* reversek(node*& head, int k) {
    node* prevptr = NULL;
    node* currptr = head;
    node* nextptr;
    
    int count = 0;
    while (currptr != NULL && count < k) {
        nextptr = currptr->next;
        currptr->next = prevptr;
        prevptr = currptr;
        currptr = nextptr;
        count++;
    }
    
    if (nextptr != NULL) {
        head->next = reversek(nextptr, k);
    }
    return prevptr; //prevptr is the newhead during the recursive call
    
}

// Cycle Detection and Removal
//FLOYD's algorithm
void makeCycle(node*& head, int pos) {
    node* temp = head;
    node* startNode;
    
    int count = 1;
    while (temp->next != NULL) {
        if (count == pos) {
            startNode = temp;
        }
        temp = temp->next;
        count++;
    }
    temp->next = startNode;
}

bool detectCycle(node*& head) {
    node* slow = head;
    node* fast = head;
    
    while (fast!=NULL && fast->next!=NULL){
        slow = slow->next;
        fast = fast->next->next;
        if (fast == slow) return true;
    }
    return false;
}

void removeCycle(node*& head) {
    node* slow = head;
    node* fast = head;

    do {
        slow = slow->next;
        fast = fast->next->next;
    } while (slow != fast);

    fast = head;
    while (slow->next != fast->next) {
        slow = slow->next;
        fast = fast->next;
    }
    slow->next = NULL;
}

/*
* Proof of floyd's algorithm:
* Distance moved by fastptr=m+n+l*j
* Distance moved by slowptr=m+n+l*i
* Distance moved by fastptr is twice the distance moved by slowptr
* we get m+n=l*(j-2*i)
*/

// Put all even position nodes after all odd position nodes
void evenAfterOdd(node*& head) {
    node* odd = head;
    node* even = head->next;
    node* evenStart = even;
    while (odd->next != NULL && even->next != NULL) {
        odd->next = even->next;
        odd = odd->next;
        even->next = odd->next;
        even = even->next;
    }
    odd->next = evenStart;
    if (odd->next != NULL) {
        even->next = NULL;
    }
}


#define FIO ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define test ll t; cin>>t; while(t--)
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    // freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
    node* head = NULL;
    insertAtTail(head, 1);
    insertAtTail(head, 2);
    insertAtTail(head, 3);
    display(head);
    insertAthead(head, 4);
    display(head);
    //cout<<search(head, 5)<<endl;
    //cout<<search(head, 3)<<endl;
    //deletion(head, 3);
    //deleteAtHead(head);
    //display(head);
    node* k=reverse(head);
    display(k);
    return 0;
}
